# oop - simiplicity and re-usability

# programming paradigms are used for - reducing complexity and determine flow of execution
# declarative, procedural, object-oriented, function, logic, event-driven, flow-driven

# style of writing a program - paradigm

# high modularity which allows for
# ///////////////////
# Easier to understand code
# re-usable code
# abstraction
# move between projects

# class - logical code block that contains attribute(variables) and behaviour(functions)
# class provides blueprint for creating an object

# objects - instance of a class
# state - attributes and behaviour of class define the state of the object

# methods - functions defined inside a class that define behaviour of the object


# concepts

# inheritance - creating a new class which is a derivative of an existing one 
# parent class = exisiting one, new class = child class/sub-class

# polymorphism - the ability of a function to change its behaviour when called by different objects

# encapsulation - limit access to method and variables by encasing them in a single unit of scope
# prevents unwanted modifications, reducing occurence of errors in output

# abstraction - ability to hide implementation details for data security



